#+PROPERTY: header-args :tangle yes

#+begin_src racket
  #lang sicp
  (#%require rackunit)
  (#%require "common_sicp_funcs.rkt")
#+end_src

* Statement

  Modify fixed-point so that it prints the sequence of approximations it
  generates, using the newline and display primitives shown in exercise 1.22.
  Then find a solution to x^x=1000 by finding a fixed point of x â†¦
  log(1000)/log(x). (Use Scheme's primitive log procedure, which computes
  natural logarithms.) Compare the number of steps this takes with and without
  average damping. (Note that you cannot start fixed-point with a guess of 1, as
  this would cause division by log(1)=0.)

* Solution

  Here I redefine the procedure:

#+begin_src racket
  (define tolerance 1e-5)

  (define (fixed-point f first-guess)
    (define (close-enough? v1 v2)
      (< (abs (- v1 v2)) tolerance))
    (define (try guess)
      (display guess)
      (newline)
      (let ((next (f guess)))
        (if (close-enough? guess next)
            next
            (try next))))
    (try first-guess))
#+end_src

  Using the procedure without damping gives 30 iterations (note that I started
  with 4). With damping it takes 8 iterations.
  
#+begin_src racket
  (fixed-point (lambda (x) (/ (log 1000) (log x))) 4) ;; 30 iterations
  (fixed-point (lambda (x) (average x (/ (log 1000) (log x)))) 4) ;; 8 iterations
#+end_src

  I think it should be possible to define a "damping" procedure that takes a
  procedure and gives the damped version of it... but I can't come up with it.

  
