#+PROPERTY: header-args :tangle yes

#+begin_src racket
  #lang sicp
  (#%require rackunit)
  (#%require "common_sicp_funcs.rkt")
#+end_src

* Statement

  In 1737, the Swiss mathematician Leonhard Euler published a memoir De
  Fractionibus Continuis, which included a continued fraction expansion for e−2,
  where e is the base of the natural logarithms. In this fraction, the Ni are
  all 1, and the Di are successively 1,2,1,1,4,1,1,6,1,1,8,… Write a program
  that uses your cont-frac procedure from exercise 1.37 to approximate e, based
  on Euler's expansion.

* Solution

  So, right now I need a function that maps integers to values. This kind of
  structure clearly is a *list*, alas, the book hasn't introduced them yet.
  
  Therefore I create this function:
  
#+begin_src racket
  (define (pseudo-list i)
    (cond ((= i 0)  1)
          ((= i 1)  2)
          ((= i 2)  1)
          ((= i 3)  1)
          ((= i 4)  4)
          ((= i 5)  1)
          ((= i 6)  1)
          ((= i 7)  6)
          ((= i 8)  1)
          ((= i 9)  1)
          ((= i 10) 8)))
#+end_src

  Then, use the function previously defined in 1.37 (note to self: learn how to
  do the equivalent of Python's ~from module import function~) and get:

#+begin_src racket
  (define (cont-frac n d k)
    (define (f i result)
      (/ (n i) (+ result (d i))))
    (define (iter i result)
      (if (> 0 i)
          result
          (iter (-- i) (f i result))))
    (iter k (/ (n k) (d k))))

  (define e (+ 2 (cont-frac (lambda (i) 1.0)
                            (lambda (i) (pseudo-list i))
                                    10)))

  (define e-exact (exp 1))
  (check-= e-exact e 1e-8)
#+end_src

* Addendum
  
  This can be simplified using lists (simplified as in "not needing the
  cumbersome pseudo-list function), although I'm sure that there has to be an
  easier way to iterate through lists in Scheme.

#+begin_src racket
  (define (list-iterator L)
    (lambda (i) (list-ref L i)))

  (define e (+ 2 (cont-frac (lambda (i) 1.0)
                            (list-iterator (list 1 2 1 1 4 1 1 6 1 1 8))
                            10)))
#+end_src

  
  
