#+PROPERTY: header-args :tangle yes

#+begin_src racket
  #lang sicp
  (#%require rackunit)
  (#%require "common_sicp_funcs.rkt")
#+end_src

* Statement

  We saw in section 1.3.3 that attempting to compute square roots by naively
  finding a fixed point of y ↦ x/y does not converge, and that this can be fixed
  by average damping. The same method works for finding cube roots as fixed
  points of the average-damped y ↦ x/y². Unfortunately, the process does not
  work for fourth roots — a single average damp is not enough to make a
  fixed-point search for y ↦ x/y³ converge. On the other hand, if we average
  damp twice (i.e., use the average damp of the average damp of y ↦ x/y³) the
  fixed-point search does converge. Do some experiments to determine how many
  average damps are required to compute nth roots as a fixed-point search based
  upon repeated average damping of y ↦ x/y^(n−1). Use this to implement a simple
  procedure for computing nth roots using ~fixed-point~, ~average-damp~, and the
  repeated procedure of exercise 1.43. Assume that any arithmetic operations you
  need are available as primitives.

* Solution

  After experimenting for a bit, I realized the sequence

  #+begin_src 
  1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, ...
  #+end_src
  
  That seemed to double every 2^n steps. Thus, a "floored logarithm" seemed
  appropriate:
  
#+begin_src racket
  (define (integer-log n) (inexact->exact (floor (log n 2))))
#+end_src

  The function is then:
  
#+begin_src racket
  (define (nroot x n)
    (fixed-point-of-transform (lambda (y) (/ x (expt y (- n 1))))
                              (repeated average-damp (integer-log n))
                              1.0))
#+end_src

  As a "proof", I simply compute the 101-th root of 2:
  
#+begin_src racket
  (nroot 2 101)
#+end_src
