#+PROPERTY: header-args :tangle yes
#+begin_src racket
  #lang sicp
  (#%require rackunit)
#+end_src


* Statement
  The following pattern of numbers is called Pascal’s triangle.

          1
        1   1
      1   2   1
    1   3   3   1
  1   4   6   4   1
        . . .

  The numbers at the edge of the triangle are all 1, and each number inside the
  triangle is the sum of the two numbers above it. Write a procedure that
  computes elements of Pascal’s triangle by means of a recursive process.
  
* Solution
  
  We first make the observation that, arranged as a lower triangular matrix,
  there are a number of particular cases:
   
  - If $n<2$, then the function will return 1
  - If $m=0$ or $m=n$, the function also returns 1
  - In any other case, $PT(n,m)=PT(n-1,m)+PT(n-1,m-1)
  
#+begin_src
      m=0 m=1 m=2 m=3 m=4 m=5
  n=0   1
  n=1   1   1
  n=2   1   2   1
  n=3   1   3   3   1
  n=4   1   4   6   4   1
  n=5   1   5  10  10   5   1
  ...
#+end_src
  
  We can therefore code the procedure in very simple terms like this:
  
#+begin_src racket
  (define (PT n m)
    (cond ((< n 2) 1)
          ((= m 0) 1)
          ((= m n) 1)
          (else (+ (PT (- n 1) m)
                   (PT (- n 1) (- m 1))))))
#+end_src
  
  And test that it computes the correct values for some low cases. Note that I
  am not checking for bounds (e.g. m>n), as this program is merely illustrative.

#+begin_src racket
  (check-equal? (PT 3 2) 3)
  (check-equal? (PT 5 2) 10)
  (check-equal? (PT 5 4) 5)
#+end_src

* Improvement
