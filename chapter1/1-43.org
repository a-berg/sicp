#+PROPERTY: header-args :tangle yes

#+begin_src racket
  #lang sicp
  (#%require rackunit)
  (#%require "common_sicp_funcs.rkt")
#+end_src

* Statement

  If f is a numerical function and n is a positive integer, then we can form the
  nth repeated application of f, which is defined to be the function whose value
  at x is f(f(⋯(f(x))⋯)). For example, if f is the function x↦x+1, then the nth
  repeated application of f is the function x↦x+n. If f is the operation of
  squaring a number, then the nth repeated application of f is the function that
  raises its argument to the 2nth power. Write a procedure that takes as inputs
  a procedure that computes f and a positive integer n and returns the procedure
  that computes the nth repeated application of f.

#+begin_src racket :tangle no
  (define (repeated f n)
    'your-answer-here)
#+end_src

  Your procedure should be able to be used as follows:

#+begin_src racket :tangle no
((repeated square 2) 5)
#+end_src

  and should return 625. Hint: You may find it convenient to use compose from
  Exercise 1-42.
  
#+begin_src racket
  (define (compose f g)
    (lambda (x) (f (g x))))
#+end_src

* Solution
  
  Abstract algebra to the rescue! Consider the set /S/ = ℝ^ℝ consisting of all the
  functions ƒ: ℝ ↦ ℝ. Then, /S/ forms a monoid under function composition with the
  identity function as the neutral element: (/S/, ∘, id) is a monoid.
  
  This means we can use the =power-op= function defined in [[file:1-17.org][Exercise 1.17]] and
  solve this immediately!
  
#+begin_src racket
  (define (power-op b n op e)
    ;; Note: you will notice this function has been copied from 1-17 as-is,
    ;; without the need of any modification, and it just works as intended!
    ;; That's the power of algebra for you.
    (define (square x) (op x x))
    (define (halve x) (/ x 2))
    (define (even? x) (= (remainder x 2) 0))

    (define (power-iter b n result)
      (if (= n 0)
          result
          (if (even? n)
              (power-iter (square b) (halve n) result)
              (power-iter (square b) (halve (- n 1)) (op result b)))))

    (power-iter b n e))

  (define (repeated f n)
    ;; I can't believe its not a monad!
    (power-op f n compose identity))
#+end_src

  This is one of these rare moments where 
