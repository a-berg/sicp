#+PROPERTY: header-args :tangle yes

  #+begin_src racket
    #lang sicp
    (#%require rackunit)
  #+end_src
  
* Statement
  Simpson's Rule is a more accurate method of numerical integration than the
  method illustrated above. Using Simpson's Rule, the integral of a function $f$
  between $a$ and $b$ is approximated as

  $$ \frac{h}{3}[y_0 + 4y_1 + 2y_2 + \cdots + y_n] $$

  where $h=\frac{b-a}{2}$, for some even integer n, and $y_k=f(a+kh)$.
  (Increasing $n$ increases the accuracy of the approximation.) Define a
  procedure that takes as arguments $f$, $a$, $b$, and n and returns the value
  of the integral, computed using Simpson's Rule. Use your procedure to
  integrate cube between 0 and 1 (with n = 100 and n = 1000), and compare the
  results to those of the integral procedure shown above.
  
* Solution
  We will be using the summation definition from this section
  #+begin_src racket
    (define (sum term a next b)
      (if (> a b)
          0
          (+ (term a)
             (sum term (next a) next b))))
  #+end_src
  and essentially apply it to compute the ys. Notice that odd terms need to be
  multiplied by 4 and even terms by 2, except for the last and first terms. This
  makes implementation a bit clunkier than I'd like, but nonetheless:
  #+begin_src racket
    (define (simpson f a b n)
      (define h (/ (+ a b) n))
      (define (simpson-next x) (+ x (* 2 h)))
      (* (+ (* 2 (sum f (+ a (* 2 h)) simpson-next b)) ;; y even
            (* 4 (sum f (+ a h) simpson-next b)) ;; y odd
            (f a);; y0
            (f b);; yn
            )
         (/ h 3)))
  #+end_src
  Then:
  #+begin_src racket
  (define (cube x) (* x x x))
  (check-= 0.25 (simpson cube 0.0 1.0 100) 1e-10) ;; 0.2500000000000004
  #+end_src
