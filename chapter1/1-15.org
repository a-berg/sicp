* Statement
  The sine of an angle (specified in radians) can be computed by making use of
  the approximation $\sin x \approx x$ if $x$ is sufficiently small, and the
  trigonometric identity
  \[
  \sin x = 3 \sin \frac{x}{3} - 4 \sin^3 \frac{x}{3}
  \]
  to reduce the size of the argument of $\sin$. (For purposes of this exercise
  an angle is considered “sufficiently small” if its magnitude is not greater
  than 0.1 radians.) These ideas are incorporated in the following procedures:
  
  #+begin_src racket
    (define (cube x) (* x x x))
    (define (p x) (- (* 3 x) (* 4 (cube x))))
    (define (sine angle)
      (if (not (> (abs angle) 0.1))
          angle
          (p (sine (/ angle 3.0)))))
  #+end_src
  
  1. How many times is the procedure ~p~ applied when ~(sine 12.15)~ is
     evaluated?
  2. What is the order of growth in space and number of steps (as a function of
     /a/) used by the process generated by the ~sine~ procedure when ~(sine a)~ is
     evaluated?

* Solution
  For the first one, we can clearly see that because the angle is divided by 3
  at each step we will need this many levels to reach an angle below certain
  precision:

  #+begin_src racket
    (define (tree-depth angle precision)
      (ceiling (log (/ angle precision) 3)))
  #+end_src
  
  Because precision = 0.1 and angle = 12.15, the tree depth is 5. At each level
  ~p~ is called $2^(l-1)$ times, giving us a grand total of 31. In fact one
  could define:

  #+begin_src racket
    (define (p-sum n)
      (if (= n 0)
          1
          (+ 1 (* 2 (p-sum (- n 1))))))
  #+end_src
  
  This is because the sum of the first n powers of 2 can be written as:
  \[
  1 + 2\cdot(1 + 2\cdot(1 + 2\cdot(1 + 2\cdot(1 + 2\cdot(1 + ... )))))
  \]
  Or, recursively: $T(n) = 1 + 2*T(n-1)$ (with $T(0)=1$).
  
  Which brings us to the second problem. Because tree depth is the major concern
  with space complexity (or at least I hope so), we can see that it is
  essentially a $\log n$ space problem, with the specific formula given in the
  first code block.

* Erratum
  I misunderstood the order of evaluation. Because of how it is defined, it
  first does the substitution ~(sine x) -> (p (sine (/ x 3)))~ until the
  argument is sufficiently small, and then does the operations defined on ~p~,
  so no tree branching ever happens.
  
  #+begin_src
    (sine 12.15)
    (p (sine 4.05))
    (p (p (sine 1.35)))
    (p (p (p (sine 0.45))))
    (p (p (p (p (sine 0.15)))))
    (p (p (p (p (p (sine 0.05))))))
    (p (p (p (p (p 0.05)))))
  #+end_src
  
  Therefore, 5 is the number of calls to ~p~, which equals the formula given for
  the "tree" depth, which means the algorithm is not tree-recursive and that the
  space complexity is equal to the time complexity of
  $\lceil\log_3{n\over\varepsilon}\rceil$, where $\varepsilon$ is the tolerance
  permitted.
