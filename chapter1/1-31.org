#+PROPERTY: header-args :tangle yes

#+begin_src racket
  #lang sicp
  (#%require rackunit)

  (define (square x) (* x x))
#+end_src

* Statement

The sum procedure is only the simplest of a vast number of similar abstractions
that can be captured as higher-order procedures. Write an analogous procedure
called product that returns the product of the values of a function at points
over a given range. Try both a recursive and an iterative approach. Show how to
define factorial in terms of product. Also use product to compute approximations
to $\pi$ using the formula:

\[\frac{\pi}{4} = \frac{2\cdot 4\cdot 4\cdot 6\cdot 6\cdot 8}{3\cdot 3\cdot 5\cdot 5\cdot 7\cdot 7}\]

* Solution

We already defined a generalized ~accum~ function before.

#+BEGIN_SRC racket
  (define (accum term a next b op neutral)
    (define (iter a result)
      (if (> a b)
          result
          (iter (next a) (op result (term a)))))
    (iter a neutral))

  (define (prod term a next b)
    (accum term a next b * 1))
#+END_SRC

Now, 

#+BEGIN_SRC racket
  (define (compute-pi n-iter)
    (define (pi-next n) (+ 1 n))
    (define (pi-term n)
      (/ (* 2 2 n (+ n 1))
         (square (+ 1 (* 2 n)))))
    (* 4 (prod pi-term 1 pi-next n-iter)))
#+END_SRC

Now let's test (note that this series converges extremely slowly).

#+begin_src racket
  (check-= 3.1415926535 (exact->inexact (compute-pi 1000)) 1e-3)
#+end_src
