#+PROPERTY: header-args :tangle yes

#+begin_src racket
  #lang sicp
  (#%require rackunit)
  (#%require "common_sicp_funcs.rkt")
#+end_src

* Statement

  Several of the numerical methods described in this chapter are instances of an
  extremely general computational strategy known as iterative improvement.
  Iterative improvement says that, to compute something, we start with an
  initial guess for the answer, test if the guess is good enough, and otherwise
  improve the guess and continue the process using the improved guess as the new
  guess. Write a procedure =iterative-improve= that takes two procedures as
  arguments: a method for telling whether a guess is good enough and a method
  for improving a guess. Iterative-improve should return as its value a
  procedure that takes a guess as argument and keeps improving the guess until
  it is good enough. Rewrite the sqrt procedure of section 1.1.7 and the
  fixed-point procedure of section 1.3.3 in terms of =iterative-improve=.

* Solution
  
  I think the solution is simply this:

#+begin_src racket
  (define (iterative-improve good-enough? improve)
    (define (internal guess)
      (if (good-enough? guess)
          guess
          (internal (improve guess))))
    (lambda (guess) (internal guess)))
#+end_src

  I refuse to make it non-recursive. Now, the square root function would be
  like this:

  #+begin_src racket
    (define (sqrt-iter x guess) ((iterative-improve (lambda (y) (fl-eq? x (square y) 1e-4))
                                                    (lambda (y) (average y (/ x y))))
                                 guess))
  #+end_src

  And fixed-point iteration:
  
#+begin_src racket
  (define (fixed-point f first-guess)
    (define (close-enough? x) (fl-eq? x (f x) tolerance))
    ((iterative-improve close-enough? f) first-guess))
#+end_src

  Basically it works. I'm sure it can be imrpoved but...
