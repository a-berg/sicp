#+PROPERTY: header-args :tangle yes

#+begin_src racket
  #lang sicp
  (#%require rackunit)
  (#%require "chapter2_functions.rkt")
  #+end_src

* Statement

  Here is an alternative procedural representation of pairs. For this
  representation, verify that ~(car (cons x y))~ yields ~x~ for any objects ~x~
  and ~y~.

#+begin_src racket
  (define (cons x y)
    (lambda (m) (m x y)))

  (define (car z)
    (z (lambda (p q) p)))
#+end_src
 
  What is the corresponding definition of cdr?

  Hint: To verify that this works, make use of the substitution model of section 1.1.5. 

* Solution

#+begin_src racket
  (define (cdr z) '...)
#+end_src
