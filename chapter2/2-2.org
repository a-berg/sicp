#+PROPERTY: header-args :tangle yes

#+begin_src racket
  #lang sicp
  (#%require rackunit)
  (#%require "chapter2_functions.rkt")
#+end_src

* Statement

  Consider the problem of representing line segments in a plane. Each segment is
  represented as a pair of points: a starting point and an ending point. Define
  a constructor ~make-segment~ and selectors ~start-segment~ and ~end-segment~
  that define the representation of segments in terms of points. Furthermore, a
  point can be represented as a pair of numbers: the x coordinate and the y
  coordinate. Accordingly, specify a constructor ~make-point~ and selectors
  ~x-point~ and ~y-point~ that define this representation. Finally, using your
  selectors and constructors, define a procedure ~midpoint-segment~ that takes a
  line segment as argument and returns its midpoint (the point whose coordinates
  are the average of the coordinates of the endpoints). To try your procedures,
  you'll need a way to print points:
  
  #+begin_src racket
    (define (print-point p)
      (display "(")
      (display (x-point p))
      (display ",")
      (display (y-point p))
      (display ")")
      (newline))
  #+end_src

* Solution

#+begin_src racket
  (define (make-segment p-start p-end)
    (cons p-start p-end))

  (define (start-segment s) (car s))
  (define (end-segment s) (cdr s))

  (define (make-point x y)
    (cons x y))
  (define (x-point p) (car p))
  (define (y-point p) (cdr p))

  (define (midpoint-segment s)
    (let ((midx (/ (+ (x-point (start-segment s)) (x-point (end-segment s))) 2))
          (midy (/ (+ (y-point (start-segment s)) (y-point (end-segment s))) 2)))
      (make-point midx midy)))

  (#%provide print-point
             make-point x-point y-point
             make-segment start-segment end-segment
             midpoint-segment)
#+end_src
